import React, { useState, useRef, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card'
import { MessageCircle, Send, X, Loader2, Trash2 } from 'lucide-react'
import { cn } from '@/lib/utils'
import { useChat } from '@/context/ai-context'

// API URL –¥–ª—è –±—ç–∫–µ–Ω–¥–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL –≤–º–µ—Å—Ç–æ –∂–µ—Å—Ç–∫–∏—Ö IP –∞–¥—Ä–µ—Å–æ–≤
const CHAT_API_URL = '/api/process' // URL –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç-–±—ç–∫–µ–Ω–¥–∞
const DEFAULT_API_URL = '/api/process' // URL –¥–ª—è Python –±—ç–∫–µ–Ω–¥–∞ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –¥–µ—Ñ–æ–ª—Ç–∞

interface Message {
  role: 'user' | 'assistant' | 'function'
  content: string
  timestamp: Date
  name?: string
}

interface ChatWidgetProps {
  isOpen: boolean
  onClose: () => void
}

interface DefaultData {
  –≥–æ–¥: string
  –∫–≤–∞—Ä—Ç–∞–ª?: number
  '–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–æ–ª—Ç–∞ –ø–æ —Å—Ä–æ–∫–∞–º –ø—Ä–æ—Å—Ä–æ—á–∫–∏': {
    '–±–µ–∑ –ø—Ä–æ—Å—Ä–æ—á–∫–∏': string
    '–ø—Ä–æ—Å—Ä–æ—á–∫–∞ 1-30 –¥–Ω–µ–π': string
    '–ø—Ä–æ—Å—Ä–æ—á–∫–∞ 31-60 –¥–Ω–µ–π': string
    '–ø—Ä–æ—Å—Ä–æ—á–∫–∞ 61-90 –¥–Ω–µ–π': string
    '–ø—Ä–æ—Å—Ä–æ—á–∫–∞ –±–æ–ª–µ–µ 90 –¥–Ω–µ–π': string
  }
}

export const ChatWidget: React.FC<ChatWidgetProps> = ({ isOpen, onClose }) => {
  const [messages, setMessages] = useState<Message[]>([])
  const [input, setInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)
  const scrollAreaRef = useRef<HTMLDivElement>(null)

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const getBackendUrl = (endpoint: string) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º window.location –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ—Å—Ç–∞
    const baseUrl = 'http://127.0.0.1:5000'
    return `${baseUrl}${endpoint}`
  }

  // Scroll to bottom whenever messages change
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' })
    }
  }, [messages])

  // Focus input when chat opens
  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus()
    }
  }, [isOpen])

  // –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const addDelay = (ms: number) =>
      new Promise((resolve) => setTimeout(resolve, ms))

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–∞
  const processDefaultProbabilityRequest = async (message: string) => {
    try {
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–∞:', message)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ Python –±—ç–∫–µ–Ω–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–∞
      const response = await fetch(getBackendUrl(DEFAULT_API_URL), {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message }),
      })

      console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:', response.status)

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: ${response.statusText}`)
      }

      const data = await response.json()
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', data)

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ 2 —Å–µ–∫—É–Ω–¥—ã
      await addDelay(2000)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
      if (data.error) {
        return {
          isDefaultRequest: true,
          success: false,
          error: data.error,
        }
      }

      return {
        isDefaultRequest: true,
        success: true,
        data,
      }
    } catch (error) {
      console.error(
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–∞:',
          error
      )
      return {
        isDefaultRequest: true,
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      }
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatDefaultData = (data: DefaultData) => {
    let result = `üìä **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–æ–ª—Ç–∞ –∑–∞ ${data.–≥–æ–¥} –≥–æ–¥`
    if (data.–∫–≤–∞—Ä—Ç–∞–ª) {
      result += `, ${data.–∫–≤–∞—Ä—Ç–∞–ª} –∫–≤–∞—Ä—Ç–∞–ª**\n\n`
    } else {
      result += `**\n\n`
    }

    const probabilities = data['–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–æ–ª—Ç–∞ –ø–æ —Å—Ä–æ–∫–∞–º –ø—Ä–æ—Å—Ä–æ—á–∫–∏']
    result += `‚Ä¢ –ë–µ–∑ –ø—Ä–æ—Å—Ä–æ—á–∫–∏: ${probabilities['–±–µ–∑ –ø—Ä–æ—Å—Ä–æ—á–∫–∏']}\n`
    result += `‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–∫–∞ 1-30 –¥–Ω–µ–π: ${probabilities['–ø—Ä–æ—Å—Ä–æ—á–∫–∞ 1-30 –¥–Ω–µ–π']}\n`
    result += `‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–∫–∞ 31-60 –¥–Ω–µ–π: ${probabilities['–ø—Ä–æ—Å—Ä–æ—á–∫–∞ 31-60 –¥–Ω–µ–π']}\n`
    result += `‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–∫–∞ 61-90 –¥–Ω–µ–π: ${probabilities['–ø—Ä–æ—Å—Ä–æ—á–∫–∞ 61-90 –¥–Ω–µ–π']}\n`
    result += `‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–∫–∞ –±–æ–ª–µ–µ 90 –¥–Ω–µ–π: ${probabilities['–ø—Ä–æ—Å—Ä–æ—á–∫–∞ –±–æ–ª–µ–µ 90 –¥–Ω–µ–π']}`

    return result
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!input.trim()) return

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage: Message = {
      role: 'user',
      content: input,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInput('')
    setIsLoading(true)

    try {
      // –ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å –æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–∞
      if (input.toLowerCase().includes('–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–æ–ª—Ç–∞')) {
        console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–∞')
        const result = await processDefaultProbabilityRequest(input)

        if (result.isDefaultRequest) {
          if (result.success) {
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö
            const formattedResult = formatDefaultData(result.data)

            setMessages((prev) => [
              ...prev,
              {
                role: 'assistant',
                content: formattedResult,
                timestamp: new Date(),
              },
            ])
          } else {
            // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–∞
            setMessages((prev) => [
              ...prev,
              {
                role: 'assistant',
                content: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–∞: ${result.error}`,
                timestamp: new Date(),
              },
            ])
          }
          setIsLoading(false)
          return
        }
      }

      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–∞ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å,
      // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç-–±—ç–∫–µ–Ω–¥
      const response = await fetch(getBackendUrl(CHAT_API_URL), {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [...messages, userMessage].map((m) => ({
            role: m.role,
            content: m.content,
            name: m.name,
          })),
        }),
      })

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: ${response.statusText}`)
      }

      const data = await response.json()

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ 2 —Å–µ–∫—É–Ω–¥—ã
      await addDelay(2000)

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      if (data.message) {
        setMessages((prev) => [
          ...prev,
          {
            role: 'assistant',
            content: data.message,
            timestamp: new Date(),
          },
        ])
      }

      // –ï—Å–ª–∏ –±—ã–ª –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (data.functionResult) {
        setMessages((prev) => [
          ...prev,
          {
            role: 'function',
            name: data.functionMessage?.name || 'get_data',
            content: JSON.stringify(data.functionResult),
            timestamp: new Date(),
          },
        ])
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      setMessages((prev) => [
        ...prev,
        {
          role: 'assistant',
          content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.',
          timestamp: new Date(),
        },
      ])
    } finally {
      setIsLoading(false)
    }
  }

  const clearChat = () => {
    setMessages([])
  }

  const { openChat } = useChat()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const formatContent = (message: Message) => {
    if (message.role === 'function') {
      try {
        const data = JSON.parse(message.content)
        return (
            <div className="font-mono text-sm">
              <div className="mb-1 font-semibold">–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏:</div>
              <pre className="overflow-x-auto whitespace-pre-wrap">
              {JSON.stringify(data, null, 2)}
            </pre>
            </div>
        )
      } catch (e) {
        return message.content
      }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å Markdown-–ø–æ–¥–æ–±–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
    if (message.role === 'assistant') {
      const formattedContent = message.content
          .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Bold text
          .replace(/\n/g, '<br/>') // Newlines

      return <div dangerouslySetInnerHTML={{ __html: formattedContent }} />
    }

    return message.content
  }

  return (
      <>
        {
          <Button
              onClick={openChat}
              className="fixed bottom-14 right-3 h-12 w-12 rounded-full p-0 shadow-lg"
              size="icon"
          >
            <MessageCircle size={24} />
          </Button>
        }

        {/* Chat Window */}
        {isOpen && (
            <Card className="fixed bottom-6 right-6 z-50 flex h-96 w-80 flex-col px-2 py-2 shadow-lg sm:w-96">
              <CardHeader className="bg-primary text-primary-foreground py-2">
                <div className="flex justify-between py-2 text-base">
                  <span>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</span>
                  <div className="flex gap-2">
                    <Trash2
                        className="cursor-pointer"
                        size={20}
                        onClick={clearChat}
                    />
                    <X className="cursor-pointer" size={20} onClick={onClose} />
                  </div>
                </div>
              </CardHeader>

              <CardContent className="flex-grow overflow-hidden p-0">
                <ScrollArea className="h-full p-4" ref={scrollAreaRef}>
                  {messages.length === 0 ? (
                      <div className="text-muted-foreground flex h-full items-center justify-center">
                        –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä
                      </div>
                  ) : (
                      messages.map((message, index) => (
                          <div
                              key={index}
                              className={cn(
                                  'mb-4 max-w-[80%] break-words rounded-lg p-3',
                                  message.role === 'user'
                                      ? 'bg-primary text-primary-foreground ml-auto'
                                      : message.role === 'function'
                                          ? 'mr-auto w-full bg-slate-200'
                                          : 'bg-muted mr-auto'
                              )}
                          >
                            {formatContent(message)}
                            <div
                                className={cn(
                                    'mt-1 text-xs',
                                    message.role === 'user'
                                        ? 'text-primary-foreground/70'
                                        : 'text-muted-foreground'
                                )}
                            >
                              {message.timestamp.toLocaleTimeString([], {
                                hour: '2-digit',
                                minute: '2-digit',
                              })}
                            </div>
                          </div>
                      ))
                  )}
                  <div ref={messagesEndRef} />
                </ScrollArea>
              </CardContent>

              <CardFooter className="p-2">
                <form onSubmit={handleSubmit} className="flex w-full gap-2">
                  <Input
                      ref={inputRef}
                      value={input}
                      onChange={(e) => setInput(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                      disabled={isLoading}
                      className="flex-grow"
                  />
                  <Button
                      type="submit"
                      size="icon"
                      disabled={isLoading || !input.trim()}
                  >
                    {isLoading ? (
                        <Loader2 className="h-4 w-4 animate-spin" />
                    ) : (
                        <Send className="h-4 w-4" />
                    )}
                  </Button>
                </form>
              </CardFooter>
            </Card>
        )}
      </>
  )
}
